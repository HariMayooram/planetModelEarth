{
  "version": 3,
  "sources": ["../../@langchain/mistralai/dist/chat_models.js", "../../@langchain/mistralai/dist/utils.js", "../../@langchain/mistralai/dist/embeddings.js", "../../@langchain/mistralai/dist/llms.js"],
  "sourcesContent": ["import { v4 as uuidv4 } from \"uuid\";\nimport { Mistral as MistralClient } from \"@mistralai/mistralai\";\nimport { HTTPClient as MistralAIHTTPClient, } from \"@mistralai/mistralai/lib/http.js\";\nimport { AIMessage, HumanMessage, HumanMessageChunk, AIMessageChunk, ToolMessageChunk, ChatMessageChunk, FunctionMessageChunk, isAIMessage, } from \"@langchain/core/messages\";\nimport { BaseChatModel, } from \"@langchain/core/language_models/chat_models\";\nimport { ChatGenerationChunk, } from \"@langchain/core/outputs\";\nimport { AsyncCaller } from \"@langchain/core/utils/async_caller\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { JsonOutputParser, StructuredOutputParser, } from \"@langchain/core/output_parsers\";\nimport { JsonOutputKeyToolsParser, convertLangChainToolCallToOpenAI, makeInvalidToolCall, parseToolCall, } from \"@langchain/core/output_parsers/openai_tools\";\nimport { RunnablePassthrough, RunnableSequence, } from \"@langchain/core/runnables\";\nimport { zodToJsonSchema } from \"zod-to-json-schema\";\nimport { _convertToolCallIdToMistralCompatible, _mistralContentChunkToMessageContentComplex, } from \"./utils.js\";\nfunction convertMessagesToMistralMessages(messages) {\n    const getRole = (role) => {\n        switch (role) {\n            case \"human\":\n                return \"user\";\n            case \"ai\":\n                return \"assistant\";\n            case \"system\":\n                return \"system\";\n            case \"tool\":\n                return \"tool\";\n            case \"function\":\n                return \"assistant\";\n            default:\n                throw new Error(`Unknown message type: ${role}`);\n        }\n    };\n    const getContent = (content, type) => {\n        const _generateContentChunk = (complex, role) => {\n            if (complex.type === \"image_url\" &&\n                (role === \"user\" || role === \"assistant\")) {\n                return {\n                    type: complex.type,\n                    imageUrl: complex?.image_url,\n                };\n            }\n            if (complex.type === \"text\") {\n                return {\n                    type: complex.type,\n                    text: complex?.text,\n                };\n            }\n            throw new Error(`ChatMistralAI only supports messages of \"image_url\" for roles \"user\" and \"assistant\", and \"text\" for all others.\\n\\nReceived: ${JSON.stringify(content, null, 2)}`);\n        };\n        if (typeof content === \"string\") {\n            return content;\n        }\n        if (Array.isArray(content)) {\n            const mistralRole = getRole(type);\n            // Mistral \"assistant\" and \"user\" roles can support Mistral ContentChunks\n            // Mistral \"system\" role can support Mistral TextChunks\n            const newContent = [];\n            content.forEach((messageContentComplex) => {\n                // Mistral content chunks only support type \"text\" and \"image_url\"\n                if (messageContentComplex.type === \"text\" ||\n                    messageContentComplex.type === \"image_url\") {\n                    newContent.push(_generateContentChunk(messageContentComplex, mistralRole));\n                }\n                else {\n                    throw new Error(`Mistral only supports types \"text\" or \"image_url\" for complex message types.`);\n                }\n            });\n            return newContent;\n        }\n        throw new Error(`Message content must be a string or an array.\\n\\nReceived: ${JSON.stringify(content, null, 2)}`);\n    };\n    const getTools = (message) => {\n        if (isAIMessage(message) && !!message.tool_calls?.length) {\n            return message.tool_calls\n                .map((toolCall) => ({\n                ...toolCall,\n                id: _convertToolCallIdToMistralCompatible(toolCall.id ?? \"\"),\n            }))\n                .map(convertLangChainToolCallToOpenAI);\n        }\n        return undefined;\n    };\n    return messages.map((message) => {\n        const toolCalls = getTools(message);\n        const content = getContent(message.content, message.getType());\n        if (\"tool_call_id\" in message && typeof message.tool_call_id === \"string\") {\n            return {\n                role: getRole(message.getType()),\n                content,\n                name: message.name,\n                toolCallId: _convertToolCallIdToMistralCompatible(message.tool_call_id),\n            };\n            // Mistral \"assistant\" role can only support either content or tool calls but not both\n        }\n        else if (isAIMessage(message)) {\n            if (toolCalls === undefined) {\n                return {\n                    role: getRole(message.getType()),\n                    content,\n                };\n            }\n            else {\n                return {\n                    role: getRole(message.getType()),\n                    toolCalls,\n                };\n            }\n        }\n        return {\n            role: getRole(message.getType()),\n            content,\n        };\n    });\n}\nfunction mistralAIResponseToChatMessage(choice, usage) {\n    const { message } = choice;\n    if (message === undefined) {\n        throw new Error(\"No message found in response\");\n    }\n    // MistralAI SDK does not include toolCalls in the non\n    // streaming return type, so we need to extract it like this\n    // to satisfy typescript.\n    let rawToolCalls = [];\n    if (\"toolCalls\" in message && Array.isArray(message.toolCalls)) {\n        rawToolCalls = message.toolCalls;\n    }\n    const content = _mistralContentChunkToMessageContentComplex(message.content);\n    switch (message.role) {\n        case \"assistant\": {\n            const toolCalls = [];\n            const invalidToolCalls = [];\n            for (const rawToolCall of rawToolCalls) {\n                try {\n                    const parsed = parseToolCall(rawToolCall, { returnId: true });\n                    toolCalls.push({\n                        ...parsed,\n                        id: parsed.id ?? uuidv4().replace(/-/g, \"\"),\n                    });\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                }\n                catch (e) {\n                    invalidToolCalls.push(makeInvalidToolCall(rawToolCall, e.message));\n                }\n            }\n            return new AIMessage({\n                content,\n                tool_calls: toolCalls,\n                invalid_tool_calls: invalidToolCalls,\n                additional_kwargs: {},\n                usage_metadata: usage\n                    ? {\n                        input_tokens: usage.promptTokens,\n                        output_tokens: usage.completionTokens,\n                        total_tokens: usage.totalTokens,\n                    }\n                    : undefined,\n            });\n        }\n        default:\n            return new HumanMessage({ content });\n    }\n}\nfunction _convertDeltaToMessageChunk(delta, usage) {\n    if (!delta.content && !delta.toolCalls) {\n        if (usage) {\n            return new AIMessageChunk({\n                content: \"\",\n                usage_metadata: usage\n                    ? {\n                        input_tokens: usage.promptTokens,\n                        output_tokens: usage.completionTokens,\n                        total_tokens: usage.totalTokens,\n                    }\n                    : undefined,\n            });\n        }\n        return null;\n    }\n    // Our merge additional kwargs util function will throw unless there\n    // is an index key in each tool object (as seen in OpenAI's) so we\n    // need to insert it here.\n    const rawToolCallChunksWithIndex = delta.toolCalls?.length\n        ? delta.toolCalls?.map((toolCall, index) => ({\n            ...toolCall,\n            index,\n            id: toolCall.id ?? uuidv4().replace(/-/g, \"\"),\n            type: \"function\",\n        }))\n        : undefined;\n    let role = \"assistant\";\n    if (delta.role) {\n        role = delta.role;\n    }\n    const content = _mistralContentChunkToMessageContentComplex(delta.content);\n    let additional_kwargs;\n    const toolCallChunks = [];\n    if (rawToolCallChunksWithIndex !== undefined) {\n        for (const rawToolCallChunk of rawToolCallChunksWithIndex) {\n            const rawArgs = rawToolCallChunk.function?.arguments;\n            const args = rawArgs === undefined || typeof rawArgs === \"string\"\n                ? rawArgs\n                : JSON.stringify(rawArgs);\n            toolCallChunks.push({\n                name: rawToolCallChunk.function?.name,\n                args,\n                id: rawToolCallChunk.id,\n                index: rawToolCallChunk.index,\n                type: \"tool_call_chunk\",\n            });\n        }\n    }\n    else {\n        additional_kwargs = {};\n    }\n    if (role === \"user\") {\n        return new HumanMessageChunk({ content });\n    }\n    else if (role === \"assistant\") {\n        return new AIMessageChunk({\n            content,\n            tool_call_chunks: toolCallChunks,\n            additional_kwargs,\n            usage_metadata: usage\n                ? {\n                    input_tokens: usage.promptTokens,\n                    output_tokens: usage.completionTokens,\n                    total_tokens: usage.totalTokens,\n                }\n                : undefined,\n        });\n    }\n    else if (role === \"tool\") {\n        return new ToolMessageChunk({\n            content,\n            additional_kwargs,\n            tool_call_id: rawToolCallChunksWithIndex?.[0].id ?? \"\",\n        });\n    }\n    else if (role === \"function\") {\n        return new FunctionMessageChunk({\n            content,\n            additional_kwargs,\n        });\n    }\n    else {\n        return new ChatMessageChunk({ content, role });\n    }\n}\nfunction _convertToolToMistralTool(tools) {\n    return tools.map((tool) => {\n        if (\"function\" in tool) {\n            return tool;\n        }\n        const description = tool.description ?? `Tool: ${tool.name}`;\n        return {\n            type: \"function\",\n            function: {\n                name: tool.name,\n                description,\n                parameters: zodToJsonSchema(tool.schema),\n            },\n        };\n    });\n}\n/**\n * Mistral AI chat model integration.\n *\n * Setup:\n * Install `@langchain/mistralai` and set an environment variable named `MISTRAL_API_KEY`.\n *\n * ```bash\n * npm install @langchain/mistralai\n * export MISTRAL_API_KEY=\"your-api-key\"\n * ```\n *\n * ## [Constructor args](https://api.js.langchain.com/classes/_langchain_mistralai.ChatMistralAI.html#constructor)\n *\n * ## [Runtime args](https://api.js.langchain.com/interfaces/_langchain_mistralai.ChatMistralAICallOptions.html)\n *\n * Runtime args can be passed as the second argument to any of the base runnable methods `.invoke`. `.stream`, `.batch`, etc.\n * They can also be passed via `.bind`, or the second arg in `.bindTools`, like shown in the examples below:\n *\n * ```typescript\n * // When calling `.bind`, call options should be passed via the first argument\n * const llmWithArgsBound = llm.bind({\n *   stop: [\"\\n\"],\n *   tools: [...],\n * });\n *\n * // When calling `.bindTools`, call options should be passed via the second argument\n * const llmWithTools = llm.bindTools(\n *   [...],\n *   {\n *     tool_choice: \"auto\",\n *   }\n * );\n * ```\n *\n * ## Examples\n *\n * <details open>\n * <summary><strong>Instantiate</strong></summary>\n *\n * ```typescript\n * import { ChatMistralAI } from '@langchain/mistralai';\n *\n * const llm = new ChatMistralAI({\n *   model: \"mistral-large-2402\",\n *   temperature: 0,\n *   // other params...\n * });\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Invoking</strong></summary>\n *\n * ```typescript\n * const input = `Translate \"I love programming\" into French.`;\n *\n * // Models also accept a list of chat messages or a formatted prompt\n * const result = await llm.invoke(input);\n * console.log(result);\n * ```\n *\n * ```txt\n * AIMessage {\n *   \"content\": \"The translation of \\\"I love programming\\\" into French is \\\"J'aime la programmation\\\". Here's the breakdown:\\n\\n- \\\"I\\\" translates to \\\"Je\\\"\\n- \\\"love\\\" translates to \\\"aime\\\"\\n- \\\"programming\\\" translates to \\\"la programmation\\\"\\n\\nSo, \\\"J'aime la programmation\\\" means \\\"I love programming\\\" in French.\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"tokenUsage\": {\n *       \"completionTokens\": 89,\n *       \"promptTokens\": 13,\n *       \"totalTokens\": 102\n *     },\n *     \"finish_reason\": \"stop\"\n *   },\n *   \"tool_calls\": [],\n *   \"invalid_tool_calls\": [],\n *   \"usage_metadata\": {\n *     \"input_tokens\": 13,\n *     \"output_tokens\": 89,\n *     \"total_tokens\": 102\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Streaming Chunks</strong></summary>\n *\n * ```typescript\n * for await (const chunk of await llm.stream(input)) {\n *   console.log(chunk);\n * }\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"content\": \"The\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"content\": \" translation\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"content\": \" of\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"content\": \" \\\"\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"content\": \"I\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *  \"content\": \".\",\n *  \"additional_kwargs\": {},\n *  \"response_metadata\": {\n *    \"prompt\": 0,\n *    \"completion\": 0\n *  },\n *  \"tool_calls\": [],\n *  \"tool_call_chunks\": [],\n *  \"invalid_tool_calls\": []\n *}\n *AIMessageChunk {\n *  \"content\": \"\",\n *  \"additional_kwargs\": {},\n *  \"response_metadata\": {\n *    \"prompt\": 0,\n *    \"completion\": 0\n *  },\n *  \"tool_calls\": [],\n *  \"tool_call_chunks\": [],\n *  \"invalid_tool_calls\": [],\n *  \"usage_metadata\": {\n *    \"input_tokens\": 13,\n *    \"output_tokens\": 89,\n *    \"total_tokens\": 102\n *  }\n *}\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Aggregate Streamed Chunks</strong></summary>\n *\n * ```typescript\n * import { AIMessageChunk } from '@langchain/core/messages';\n * import { concat } from '@langchain/core/utils/stream';\n *\n * const stream = await llm.stream(input);\n * let full: AIMessageChunk | undefined;\n * for await (const chunk of stream) {\n *   full = !full ? chunk : concat(full, chunk);\n * }\n * console.log(full);\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"content\": \"The translation of \\\"I love programming\\\" into French is \\\"J'aime la programmation\\\". Here's the breakdown:\\n\\n- \\\"I\\\" translates to \\\"Je\\\"\\n- \\\"love\\\" translates to \\\"aime\\\"\\n- \\\"programming\\\" translates to \\\"la programmation\\\"\\n\\nSo, \\\"J'aime la programmation\\\" means \\\"I love programming\\\" in French.\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": [],\n *   \"usage_metadata\": {\n *     \"input_tokens\": 13,\n *     \"output_tokens\": 89,\n *     \"total_tokens\": 102\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Bind tools</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const GetWeather = {\n *   name: \"GetWeather\",\n *   description: \"Get the current weather in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const GetPopulation = {\n *   name: \"GetPopulation\",\n *   description: \"Get the current population in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const llmWithTools = llm.bindTools([GetWeather, GetPopulation]);\n * const aiMsg = await llmWithTools.invoke(\n *   \"Which city is hotter today and which is bigger: LA or NY?\"\n * );\n * console.log(aiMsg.tool_calls);\n * ```\n *\n * ```txt\n * [\n *   {\n *     name: 'GetWeather',\n *     args: { location: 'Los Angeles, CA' },\n *     type: 'tool_call',\n *     id: '47i216yko'\n *   },\n *   {\n *     name: 'GetWeather',\n *     args: { location: 'New York, NY' },\n *     type: 'tool_call',\n *     id: 'nb3v8Fpcn'\n *   },\n *   {\n *     name: 'GetPopulation',\n *     args: { location: 'Los Angeles, CA' },\n *     type: 'tool_call',\n *     id: 'EedWzByIB'\n *   },\n *   {\n *     name: 'GetPopulation',\n *     args: { location: 'New York, NY' },\n *     type: 'tool_call',\n *     id: 'jLdLia7zC'\n *   }\n * ]\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Structured Output</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const Joke = z.object({\n *   setup: z.string().describe(\"The setup of the joke\"),\n *   punchline: z.string().describe(\"The punchline to the joke\"),\n *   rating: z.number().optional().describe(\"How funny the joke is, from 1 to 10\")\n * }).describe('Joke to tell user.');\n *\n * const structuredLlm = llm.withStructuredOutput(Joke, { name: \"Joke\" });\n * const jokeResult = await structuredLlm.invoke(\"Tell me a joke about cats\");\n * console.log(jokeResult);\n * ```\n *\n * ```txt\n * {\n *   setup: \"Why don't cats play poker in the jungle?\",\n *   punchline: 'Too many cheetahs!',\n *   rating: 7\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Usage Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForMetadata = await llm.invoke(input);\n * console.log(aiMsgForMetadata.usage_metadata);\n * ```\n *\n * ```txt\n * { input_tokens: 13, output_tokens: 89, total_tokens: 102 }\n * ```\n * </details>\n *\n * <br />\n */\nexport class ChatMistralAI extends BaseChatModel {\n    // Used for tracing, replace with the same name as your class\n    static lc_name() {\n        return \"ChatMistralAI\";\n    }\n    constructor(fields) {\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"chat_models\", \"mistralai\"]\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"mistral-small-latest\"\n        });\n        Object.defineProperty(this, \"apiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * @deprecated use serverURL instead\n         */\n        Object.defineProperty(this, \"endpoint\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"serverURL\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0.7\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * @deprecated use safePrompt instead\n         */\n        Object.defineProperty(this, \"safeMode\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"safePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"randomSeed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"seed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"streamUsage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"beforeRequestHooks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"requestErrorHooks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"responseHooks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"httpClient\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numCompletions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const apiKey = fields?.apiKey ?? getEnvironmentVariable(\"MISTRAL_API_KEY\");\n        if (!apiKey) {\n            throw new Error(\"API key MISTRAL_API_KEY is missing for MistralAI, but it is required.\");\n        }\n        this.apiKey = apiKey;\n        this.streaming = fields?.streaming ?? this.streaming;\n        this.serverURL = fields?.serverURL ?? this.serverURL;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.topP = fields?.topP ?? this.topP;\n        this.maxTokens = fields?.maxTokens ?? this.maxTokens;\n        this.safePrompt = fields?.safePrompt ?? this.safePrompt;\n        this.randomSeed = fields?.seed ?? fields?.randomSeed ?? this.seed;\n        this.seed = this.randomSeed;\n        this.maxRetries = fields?.maxRetries;\n        this.httpClient = fields?.httpClient;\n        this.model = fields?.model ?? fields?.modelName ?? this.model;\n        this.streamUsage = fields?.streamUsage ?? this.streamUsage;\n        this.beforeRequestHooks =\n            fields?.beforeRequestHooks ?? this.beforeRequestHooks;\n        this.requestErrorHooks =\n            fields?.requestErrorHooks ?? this.requestErrorHooks;\n        this.responseHooks = fields?.responseHooks ?? this.responseHooks;\n        this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n        this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n        this.numCompletions = fields?.numCompletions ?? this.numCompletions;\n        this.addAllHooksToHttpClient();\n    }\n    get lc_secrets() {\n        return {\n            apiKey: \"MISTRAL_API_KEY\",\n        };\n    }\n    get lc_aliases() {\n        return {\n            apiKey: \"mistral_api_key\",\n        };\n    }\n    getLsParams(options) {\n        const params = this.invocationParams(options);\n        return {\n            ls_provider: \"mistral\",\n            ls_model_name: this.model,\n            ls_model_type: \"chat\",\n            ls_temperature: params.temperature ?? undefined,\n            ls_max_tokens: params.maxTokens ?? undefined,\n        };\n    }\n    _llmType() {\n        return \"mistral_ai\";\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */\n    invocationParams(options) {\n        const { response_format, tools, tool_choice } = options ?? {};\n        const mistralAITools = tools?.length\n            ? _convertToolToMistralTool(tools)\n            : undefined;\n        const params = {\n            model: this.model,\n            tools: mistralAITools,\n            temperature: this.temperature,\n            maxTokens: this.maxTokens,\n            topP: this.topP,\n            randomSeed: this.seed,\n            safePrompt: this.safePrompt,\n            toolChoice: tool_choice,\n            responseFormat: response_format,\n            presencePenalty: this.presencePenalty,\n            frequencyPenalty: this.frequencyPenalty,\n            n: this.numCompletions,\n        };\n        return params;\n    }\n    bindTools(tools, kwargs) {\n        return this.bind({\n            tools: _convertToolToMistralTool(tools),\n            ...kwargs,\n        });\n    }\n    async completionWithRetry(input, streaming) {\n        const caller = new AsyncCaller({\n            maxRetries: this.maxRetries,\n        });\n        const client = new MistralClient({\n            apiKey: this.apiKey,\n            serverURL: this.serverURL,\n            // If httpClient exists, pass it into constructor\n            ...(this.httpClient ? { httpClient: this.httpClient } : {}),\n        });\n        return caller.call(async () => {\n            try {\n                let res;\n                if (streaming) {\n                    res = await client.chat.stream(input);\n                }\n                else {\n                    res = await client.chat.complete(input);\n                }\n                return res;\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }\n            catch (e) {\n                if (e.message?.includes(\"status: 400\") ||\n                    e.message?.toLowerCase().includes(\"status 400\") ||\n                    e.message?.includes(\"validation failed\")) {\n                    e.status = 400;\n                }\n                throw e;\n            }\n        });\n    }\n    /** @ignore */\n    async _generate(messages, options, runManager) {\n        const tokenUsage = {};\n        const params = this.invocationParams(options);\n        const mistralMessages = convertMessagesToMistralMessages(messages);\n        const input = {\n            ...params,\n            messages: mistralMessages,\n        };\n        // Enable streaming for signal controller or timeout due\n        // to SDK limitations on canceling requests.\n        const shouldStream = options.signal ?? !!options.timeout;\n        // Handle streaming\n        if (this.streaming || shouldStream) {\n            const stream = this._streamResponseChunks(messages, options, runManager);\n            const finalChunks = {};\n            for await (const chunk of stream) {\n                const index = chunk.generationInfo?.completion ?? 0;\n                if (finalChunks[index] === undefined) {\n                    finalChunks[index] = chunk;\n                }\n                else {\n                    finalChunks[index] = finalChunks[index].concat(chunk);\n                }\n            }\n            const generations = Object.entries(finalChunks)\n                .sort(([aKey], [bKey]) => parseInt(aKey, 10) - parseInt(bKey, 10))\n                .map(([_, value]) => value);\n            return { generations, llmOutput: { estimatedTokenUsage: tokenUsage } };\n        }\n        // Not streaming, so we can just call the API once.\n        const response = await this.completionWithRetry(input, false);\n        const { completionTokens, promptTokens, totalTokens } = response?.usage ?? {};\n        if (completionTokens) {\n            tokenUsage.completionTokens =\n                (tokenUsage.completionTokens ?? 0) + completionTokens;\n        }\n        if (promptTokens) {\n            tokenUsage.promptTokens = (tokenUsage.promptTokens ?? 0) + promptTokens;\n        }\n        if (totalTokens) {\n            tokenUsage.totalTokens = (tokenUsage.totalTokens ?? 0) + totalTokens;\n        }\n        const generations = [];\n        for (const part of response?.choices ?? []) {\n            if (\"delta\" in part) {\n                throw new Error(\"Delta not supported in non-streaming mode.\");\n            }\n            if (!(\"message\" in part)) {\n                throw new Error(\"No message found in the choice.\");\n            }\n            let text = part.message?.content ?? \"\";\n            if (Array.isArray(text)) {\n                text = text[0].type === \"text\" ? text[0].text : \"\";\n            }\n            const generation = {\n                text,\n                message: mistralAIResponseToChatMessage(part, response?.usage),\n            };\n            if (part.finishReason) {\n                generation.generationInfo = { finishReason: part.finishReason };\n            }\n            generations.push(generation);\n        }\n        return {\n            generations,\n            llmOutput: { tokenUsage },\n        };\n    }\n    async *_streamResponseChunks(messages, options, runManager) {\n        const mistralMessages = convertMessagesToMistralMessages(messages);\n        const params = this.invocationParams(options);\n        const input = {\n            ...params,\n            messages: mistralMessages,\n        };\n        const streamIterable = await this.completionWithRetry(input, true);\n        for await (const { data } of streamIterable) {\n            if (options.signal?.aborted) {\n                throw new Error(\"AbortError\");\n            }\n            const choice = data?.choices[0];\n            if (!choice || !(\"delta\" in choice)) {\n                continue;\n            }\n            const { delta } = choice;\n            if (!delta) {\n                continue;\n            }\n            const newTokenIndices = {\n                prompt: 0,\n                completion: choice.index ?? 0,\n            };\n            const shouldStreamUsage = this.streamUsage || options.streamUsage;\n            const message = _convertDeltaToMessageChunk(delta, shouldStreamUsage ? data.usage : null);\n            if (message === null) {\n                // Do not yield a chunk if the message is empty\n                continue;\n            }\n            let text = delta.content ?? \"\";\n            if (Array.isArray(text)) {\n                text = text[0].type === \"text\" ? text[0].text : \"\";\n            }\n            const generationChunk = new ChatGenerationChunk({\n                message,\n                text,\n                generationInfo: newTokenIndices,\n            });\n            yield generationChunk;\n            // eslint-disable-next-line no-void\n            void runManager?.handleLLMNewToken(generationChunk.text ?? \"\", newTokenIndices, undefined, undefined, undefined, { chunk: generationChunk });\n        }\n    }\n    addAllHooksToHttpClient() {\n        try {\n            // To prevent duplicate hooks\n            this.removeAllHooksFromHttpClient();\n            // If the user wants to use hooks, but hasn't created an HTTPClient yet\n            const hasHooks = [\n                this.beforeRequestHooks,\n                this.requestErrorHooks,\n                this.responseHooks,\n            ].some((hook) => hook && hook.length > 0);\n            if (hasHooks && !this.httpClient) {\n                this.httpClient = new MistralAIHTTPClient();\n            }\n            if (this.beforeRequestHooks) {\n                for (const hook of this.beforeRequestHooks) {\n                    this.httpClient?.addHook(\"beforeRequest\", hook);\n                }\n            }\n            if (this.requestErrorHooks) {\n                for (const hook of this.requestErrorHooks) {\n                    this.httpClient?.addHook(\"requestError\", hook);\n                }\n            }\n            if (this.responseHooks) {\n                for (const hook of this.responseHooks) {\n                    this.httpClient?.addHook(\"response\", hook);\n                }\n            }\n        }\n        catch {\n            throw new Error(\"Error in adding all hooks\");\n        }\n    }\n    removeAllHooksFromHttpClient() {\n        try {\n            if (this.beforeRequestHooks) {\n                for (const hook of this.beforeRequestHooks) {\n                    this.httpClient?.removeHook(\"beforeRequest\", hook);\n                }\n            }\n            if (this.requestErrorHooks) {\n                for (const hook of this.requestErrorHooks) {\n                    this.httpClient?.removeHook(\"requestError\", hook);\n                }\n            }\n            if (this.responseHooks) {\n                for (const hook of this.responseHooks) {\n                    this.httpClient?.removeHook(\"response\", hook);\n                }\n            }\n        }\n        catch {\n            throw new Error(\"Error in removing hooks\");\n        }\n    }\n    removeHookFromHttpClient(hook) {\n        try {\n            this.httpClient?.removeHook(\"beforeRequest\", hook);\n            this.httpClient?.removeHook(\"requestError\", hook);\n            this.httpClient?.removeHook(\"response\", hook);\n        }\n        catch {\n            throw new Error(\"Error in removing hook\");\n        }\n    }\n    /** @ignore */\n    _combineLLMOutput() {\n        return [];\n    }\n    withStructuredOutput(outputSchema, config) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const schema = outputSchema;\n        const name = config?.name;\n        const method = config?.method;\n        const includeRaw = config?.includeRaw;\n        let llm;\n        let outputParser;\n        if (method === \"jsonMode\") {\n            llm = this.bind({\n                response_format: { type: \"json_object\" },\n            });\n            if (isZodSchema(schema)) {\n                outputParser = StructuredOutputParser.fromZodSchema(schema);\n            }\n            else {\n                outputParser = new JsonOutputParser();\n            }\n        }\n        else {\n            let functionName = name ?? \"extract\";\n            // Is function calling\n            if (isZodSchema(schema)) {\n                const asJsonSchema = zodToJsonSchema(schema);\n                llm = this.bind({\n                    tools: [\n                        {\n                            type: \"function\",\n                            function: {\n                                name: functionName,\n                                description: asJsonSchema.description,\n                                parameters: asJsonSchema,\n                            },\n                        },\n                    ],\n                    tool_choice: \"any\",\n                });\n                outputParser = new JsonOutputKeyToolsParser({\n                    returnSingle: true,\n                    keyName: functionName,\n                    zodSchema: schema,\n                });\n            }\n            else {\n                let openAIFunctionDefinition;\n                if (typeof schema.name === \"string\" &&\n                    typeof schema.parameters === \"object\" &&\n                    schema.parameters != null) {\n                    openAIFunctionDefinition = schema;\n                    functionName = schema.name;\n                }\n                else {\n                    openAIFunctionDefinition = {\n                        name: functionName,\n                        description: schema.description ?? \"\",\n                        parameters: schema,\n                    };\n                }\n                llm = this.bind({\n                    tools: [\n                        {\n                            type: \"function\",\n                            function: openAIFunctionDefinition,\n                        },\n                    ],\n                    tool_choice: \"any\",\n                });\n                outputParser = new JsonOutputKeyToolsParser({\n                    returnSingle: true,\n                    keyName: functionName,\n                });\n            }\n        }\n        if (!includeRaw) {\n            return llm.pipe(outputParser);\n        }\n        const parserAssign = RunnablePassthrough.assign({\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            parsed: (input, config) => outputParser.invoke(input.raw, config),\n        });\n        const parserNone = RunnablePassthrough.assign({\n            parsed: () => null,\n        });\n        const parsedWithFallback = parserAssign.withFallbacks({\n            fallbacks: [parserNone],\n        });\n        return RunnableSequence.from([\n            {\n                raw: llm,\n            },\n            parsedWithFallback,\n        ]);\n    }\n}\nfunction isZodSchema(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ninput) {\n    // Check for a characteristic method of Zod schemas\n    return typeof input?.parse === \"function\";\n}\n", "// Mistral enforces a specific pattern for tool call IDs\nconst TOOL_CALL_ID_PATTERN = /^[a-zA-Z0-9]{9}$/;\nexport function _isValidMistralToolCallId(toolCallId) {\n    return TOOL_CALL_ID_PATTERN.test(toolCallId);\n}\nfunction _base62Encode(num) {\n    let numCopy = num;\n    const base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    if (numCopy === 0)\n        return base62[0];\n    const arr = [];\n    const base = base62.length;\n    while (numCopy) {\n        arr.push(base62[numCopy % base]);\n        numCopy = Math.floor(numCopy / base);\n    }\n    return arr.reverse().join(\"\");\n}\nfunction _simpleHash(str) {\n    let hash = 0;\n    for (let i = 0; i < str.length; i += 1) {\n        const char = str.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash &= hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash);\n}\nexport function _convertToolCallIdToMistralCompatible(toolCallId) {\n    if (_isValidMistralToolCallId(toolCallId)) {\n        return toolCallId;\n    }\n    else {\n        const hash = _simpleHash(toolCallId);\n        const base62Str = _base62Encode(hash);\n        if (base62Str.length >= 9) {\n            return base62Str.slice(0, 9);\n        }\n        else {\n            return base62Str.padStart(9, \"0\");\n        }\n    }\n}\nexport function _mistralContentChunkToMessageContentComplex(content) {\n    if (!content) {\n        return \"\";\n    }\n    if (typeof content === \"string\") {\n        return content;\n    }\n    return content.map((contentChunk) => {\n        // Only Mistral ImageURLChunks need conversion to MessageContentComplex\n        if (contentChunk.type === \"image_url\") {\n            if (typeof contentChunk.imageUrl !== \"string\" &&\n                contentChunk.imageUrl?.detail) {\n                const { detail } = contentChunk.imageUrl;\n                // Mistral detail can be any string, but MessageContentComplex only supports\n                // detail to be \"high\", \"auto\", or \"low\"\n                if (detail !== \"high\" && detail !== \"auto\" && detail !== \"low\") {\n                    return {\n                        type: contentChunk.type,\n                        image_url: {\n                            url: contentChunk.imageUrl.url,\n                        },\n                    };\n                }\n            }\n            return {\n                type: contentChunk.type,\n                image_url: contentChunk.imageUrl,\n            };\n        }\n        return contentChunk;\n    });\n}\n", "import { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { Embeddings } from \"@langchain/core/embeddings\";\nimport { chunkArray } from \"@langchain/core/utils/chunk_array\";\nimport { HTTPClient as MistralAIHTTPClient, } from \"@mistralai/mistralai/lib/http.js\";\n/**\n * Class for generating embeddings using the MistralAI API.\n */\nexport class MistralAIEmbeddings extends Embeddings {\n    constructor(fields) {\n        super(fields ?? {});\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"mistral-embed\"\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"mistral-embed\"\n        });\n        Object.defineProperty(this, \"encodingFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"float\"\n        });\n        Object.defineProperty(this, \"batchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 512\n        });\n        Object.defineProperty(this, \"stripNewLines\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"apiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * @deprecated use serverURL instead\n         */\n        Object.defineProperty(this, \"endpoint\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"serverURL\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"beforeRequestHooks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"requestErrorHooks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"responseHooks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"httpClient\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const apiKey = fields?.apiKey ?? getEnvironmentVariable(\"MISTRAL_API_KEY\");\n        if (!apiKey) {\n            throw new Error(\"API key missing for MistralAI, but it is required.\");\n        }\n        this.apiKey = apiKey;\n        this.serverURL = fields?.serverURL ?? this.serverURL;\n        this.modelName = fields?.model ?? fields?.modelName ?? this.model;\n        this.model = this.modelName;\n        this.encodingFormat = fields?.encodingFormat ?? this.encodingFormat;\n        this.batchSize = fields?.batchSize ?? this.batchSize;\n        this.stripNewLines = fields?.stripNewLines ?? this.stripNewLines;\n        this.beforeRequestHooks =\n            fields?.beforeRequestHooks ?? this.beforeRequestHooks;\n        this.requestErrorHooks =\n            fields?.requestErrorHooks ?? this.requestErrorHooks;\n        this.responseHooks = fields?.responseHooks ?? this.responseHooks;\n        this.httpClient = fields?.httpClient ?? this.httpClient;\n        this.addAllHooksToHttpClient();\n    }\n    /**\n     * Method to generate embeddings for an array of documents. Splits the\n     * documents into batches and makes requests to the MistralAI API to generate\n     * embeddings.\n     * @param {Array<string>} texts Array of documents to generate embeddings for.\n     * @returns {Promise<number[][]>} Promise that resolves to a 2D array of embeddings for each document.\n     */\n    async embedDocuments(texts) {\n        const batches = chunkArray(this.stripNewLines ? texts.map((t) => t.replace(/\\n/g, \" \")) : texts, this.batchSize);\n        const batchRequests = batches.map((batch) => this.embeddingWithRetry(batch));\n        const batchResponses = await Promise.all(batchRequests);\n        const embeddings = [];\n        for (let i = 0; i < batchResponses.length; i += 1) {\n            const batch = batches[i];\n            const { data: batchResponse } = batchResponses[i];\n            for (let j = 0; j < batch.length; j += 1) {\n                embeddings.push(batchResponse[j].embedding ?? []);\n            }\n        }\n        return embeddings;\n    }\n    /**\n     * Method to generate an embedding for a single document. Calls the\n     * embeddingWithRetry method with the document as the input.\n     * @param {string} text Document to generate an embedding for.\n     * @returns {Promise<number[]>} Promise that resolves to an embedding for the document.\n     */\n    async embedQuery(text) {\n        const { data } = await this.embeddingWithRetry(this.stripNewLines ? text.replace(/\\n/g, \" \") : text);\n        return data[0].embedding ?? [];\n    }\n    /**\n     * Private method to make a request to the MistralAI API to generate\n     * embeddings. Handles the retry logic and returns the response from the\n     * API.\n     * @param {string | Array<string>} inputs Text to send to the MistralAI API.\n     * @returns {Promise<MistralAIEmbeddingsResponse>} Promise that resolves to the response from the API.\n     */\n    async embeddingWithRetry(inputs) {\n        const { Mistral } = await this.imports();\n        const client = new Mistral({\n            apiKey: this.apiKey,\n            serverURL: this.serverURL,\n            // If httpClient exists, pass it into constructor\n            ...(this.httpClient ? { httpClient: this.httpClient } : {}),\n        });\n        const embeddingsRequest = {\n            model: this.model,\n            inputs,\n            encodingFormat: this.encodingFormat,\n        };\n        return this.caller.call(async () => {\n            const res = await client.embeddings.create(embeddingsRequest);\n            return res;\n        });\n    }\n    addAllHooksToHttpClient() {\n        try {\n            // To prevent duplicate hooks\n            this.removeAllHooksFromHttpClient();\n            // If the user wants to use hooks, but hasn't created an HTTPClient yet\n            const hasHooks = [\n                this.beforeRequestHooks,\n                this.requestErrorHooks,\n                this.responseHooks,\n            ].some((hook) => hook && hook.length > 0);\n            if (hasHooks && !this.httpClient) {\n                this.httpClient = new MistralAIHTTPClient();\n            }\n            if (this.beforeRequestHooks) {\n                for (const hook of this.beforeRequestHooks) {\n                    this.httpClient?.addHook(\"beforeRequest\", hook);\n                }\n            }\n            if (this.requestErrorHooks) {\n                for (const hook of this.requestErrorHooks) {\n                    this.httpClient?.addHook(\"requestError\", hook);\n                }\n            }\n            if (this.responseHooks) {\n                for (const hook of this.responseHooks) {\n                    this.httpClient?.addHook(\"response\", hook);\n                }\n            }\n        }\n        catch {\n            throw new Error(\"Error in adding all hooks\");\n        }\n    }\n    removeAllHooksFromHttpClient() {\n        try {\n            if (this.beforeRequestHooks) {\n                for (const hook of this.beforeRequestHooks) {\n                    this.httpClient?.removeHook(\"beforeRequest\", hook);\n                }\n            }\n            if (this.requestErrorHooks) {\n                for (const hook of this.requestErrorHooks) {\n                    this.httpClient?.removeHook(\"requestError\", hook);\n                }\n            }\n            if (this.responseHooks) {\n                for (const hook of this.responseHooks) {\n                    this.httpClient?.removeHook(\"response\", hook);\n                }\n            }\n        }\n        catch {\n            throw new Error(\"Error in removing hooks\");\n        }\n    }\n    removeHookFromHttpClient(hook) {\n        try {\n            this.httpClient?.removeHook(\"beforeRequest\", hook);\n            this.httpClient?.removeHook(\"requestError\", hook);\n            this.httpClient?.removeHook(\"response\", hook);\n        }\n        catch {\n            throw new Error(\"Error in removing hook\");\n        }\n    }\n    /** @ignore */\n    async imports() {\n        const { Mistral } = await import(\"@mistralai/mistralai\");\n        return { Mistral };\n    }\n}\n", "import { LLM } from \"@langchain/core/language_models/llms\";\nimport { GenerationChunk } from \"@langchain/core/outputs\";\nimport { HTTPClient as MistralAIHTTPClient, } from \"@mistralai/mistralai/lib/http.js\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { chunkArray } from \"@langchain/core/utils/chunk_array\";\nimport { AsyncCaller } from \"@langchain/core/utils/async_caller\";\n/**\n * MistralAI completions LLM.\n */\nexport class MistralAI extends LLM {\n    static lc_name() {\n        return \"MistralAI\";\n    }\n    constructor(fields) {\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"llms\", \"mistralai\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"codestral-latest\"\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"randomSeed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"batchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 20\n        });\n        Object.defineProperty(this, \"apiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * @deprecated use serverURL instead\n         */\n        Object.defineProperty(this, \"endpoint\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"serverURL\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"beforeRequestHooks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"requestErrorHooks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"responseHooks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"httpClient\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.model = fields?.model ?? this.model;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.topP = fields?.topP ?? this.topP;\n        this.maxTokens = fields?.maxTokens ?? this.maxTokens;\n        this.randomSeed = fields?.randomSeed ?? this.randomSeed;\n        this.batchSize = fields?.batchSize ?? this.batchSize;\n        this.streaming = fields?.streaming ?? this.streaming;\n        this.serverURL = fields?.serverURL ?? this.serverURL;\n        this.maxRetries = fields?.maxRetries;\n        this.maxConcurrency = fields?.maxConcurrency;\n        this.beforeRequestHooks =\n            fields?.beforeRequestHooks ?? this.beforeRequestHooks;\n        this.requestErrorHooks =\n            fields?.requestErrorHooks ?? this.requestErrorHooks;\n        this.responseHooks = fields?.responseHooks ?? this.responseHooks;\n        this.httpClient = fields?.httpClient ?? this.httpClient;\n        const apiKey = fields?.apiKey ?? getEnvironmentVariable(\"MISTRAL_API_KEY\");\n        if (!apiKey) {\n            throw new Error(`MistralAI requires an API key to be set.\nEither provide one via the \"apiKey\" field in the constructor, or set the \"MISTRAL_API_KEY\" environment variable.`);\n        }\n        this.apiKey = apiKey;\n        this.addAllHooksToHttpClient();\n    }\n    get lc_secrets() {\n        return {\n            apiKey: \"MISTRAL_API_KEY\",\n        };\n    }\n    get lc_aliases() {\n        return {\n            apiKey: \"mistral_api_key\",\n        };\n    }\n    _llmType() {\n        return \"mistralai\";\n    }\n    invocationParams(options) {\n        return {\n            model: this.model,\n            suffix: options.suffix,\n            temperature: this.temperature,\n            maxTokens: this.maxTokens,\n            topP: this.topP,\n            randomSeed: this.randomSeed,\n            stop: options.stop,\n        };\n    }\n    /**\n     * For some given input string and options, return a string output.\n     *\n     * Despite the fact that `invoke` is overridden below, we still need this\n     * in order to handle public APi calls to `generate()`.\n     */\n    async _call(prompt, options) {\n        const params = {\n            ...this.invocationParams(options),\n            prompt,\n        };\n        const result = await this.completionWithRetry(params, options, false);\n        let content = result?.choices?.[0].message.content ?? \"\";\n        if (Array.isArray(content)) {\n            content = content[0].type === \"text\" ? content[0].text : \"\";\n        }\n        return content;\n    }\n    async _generate(prompts, options, runManager) {\n        const subPrompts = chunkArray(prompts, this.batchSize);\n        const choices = [];\n        const params = this.invocationParams(options);\n        for (let i = 0; i < subPrompts.length; i += 1) {\n            const data = await (async () => {\n                if (this.streaming) {\n                    const responseData = [];\n                    for (let x = 0; x < subPrompts[i].length; x += 1) {\n                        const choices = [];\n                        let response;\n                        const stream = await this.completionWithRetry({\n                            ...params,\n                            prompt: subPrompts[i][x],\n                        }, options, true);\n                        for await (const { data } of stream) {\n                            // on the first message set the response properties\n                            if (!response) {\n                                response = {\n                                    id: data.id,\n                                    object: \"chat.completion\",\n                                    created: data.created,\n                                    model: data.model,\n                                };\n                            }\n                            // on all messages, update choice\n                            for (const part of data.choices) {\n                                let content = part.delta.content ?? \"\";\n                                // Convert MistralContentChunk data into a string\n                                if (Array.isArray(content)) {\n                                    let strContent = \"\";\n                                    for (const contentChunk of content) {\n                                        if (contentChunk.type === \"text\") {\n                                            strContent += contentChunk.text;\n                                        }\n                                        else if (contentChunk.type === \"image_url\") {\n                                            const imageURL = typeof contentChunk.imageUrl === \"string\"\n                                                ? contentChunk.imageUrl\n                                                : contentChunk.imageUrl.url;\n                                            strContent += imageURL;\n                                        }\n                                    }\n                                    content = strContent;\n                                }\n                                if (!choices[part.index]) {\n                                    choices[part.index] = {\n                                        index: part.index,\n                                        message: {\n                                            role: \"assistant\",\n                                            content,\n                                            toolCalls: null,\n                                        },\n                                        finishReason: part.finishReason ?? \"length\",\n                                    };\n                                }\n                                else {\n                                    const choice = choices[part.index];\n                                    choice.message.content += content;\n                                    choice.finishReason = part.finishReason ?? \"length\";\n                                }\n                                void runManager?.handleLLMNewToken(content, {\n                                    prompt: part.index,\n                                    completion: part.index,\n                                });\n                            }\n                        }\n                        if (options.signal?.aborted) {\n                            throw new Error(\"AbortError\");\n                        }\n                        responseData.push({\n                            ...response,\n                            choices,\n                        });\n                    }\n                    return responseData;\n                }\n                else {\n                    const responseData = [];\n                    for (let x = 0; x < subPrompts[i].length; x += 1) {\n                        const res = await this.completionWithRetry({\n                            ...params,\n                            prompt: subPrompts[i][x],\n                        }, options, false);\n                        responseData.push(res);\n                    }\n                    return responseData;\n                }\n            })();\n            choices.push(...data.map((d) => d.choices ?? []));\n        }\n        const generations = choices.map((promptChoices) => promptChoices.map((choice) => {\n            let text = choice.message?.content ?? \"\";\n            if (Array.isArray(text)) {\n                text = text[0].type === \"text\" ? text[0].text : \"\";\n            }\n            return {\n                text,\n                generationInfo: {\n                    finishReason: choice.finishReason,\n                },\n            };\n        }));\n        return {\n            generations,\n        };\n    }\n    async completionWithRetry(request, options, stream) {\n        const { Mistral } = await this.imports();\n        const caller = new AsyncCaller({\n            maxConcurrency: options.maxConcurrency || this.maxConcurrency,\n            maxRetries: this.maxRetries,\n        });\n        const client = new Mistral({\n            apiKey: this.apiKey,\n            serverURL: this.serverURL,\n            timeoutMs: options.timeout,\n            // If httpClient exists, pass it into constructor\n            ...(this.httpClient ? { httpClient: this.httpClient } : {}),\n        });\n        return caller.callWithOptions({\n            signal: options.signal,\n        }, async () => {\n            try {\n                let res;\n                if (stream) {\n                    res = await client.fim.stream(request);\n                }\n                else {\n                    res = await client.fim.complete(request);\n                }\n                return res;\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }\n            catch (e) {\n                if (e.message?.includes(\"status: 400\") ||\n                    e.message?.toLowerCase().includes(\"status 400\") ||\n                    e.message?.includes(\"validation failed\")) {\n                    e.status = 400;\n                }\n                throw e;\n            }\n        });\n    }\n    async *_streamResponseChunks(prompt, options, runManager) {\n        const params = {\n            ...this.invocationParams(options),\n            prompt,\n        };\n        const stream = await this.completionWithRetry(params, options, true);\n        for await (const message of stream) {\n            const { data } = message;\n            const choice = data?.choices[0];\n            if (!choice) {\n                continue;\n            }\n            let text = choice.delta.content ?? \"\";\n            if (Array.isArray(text)) {\n                text = text[0].type === \"text\" ? text[0].text : \"\";\n            }\n            const chunk = new GenerationChunk({\n                text,\n                generationInfo: {\n                    finishReason: choice.finishReason,\n                    tokenUsage: data.usage,\n                },\n            });\n            yield chunk;\n            // eslint-disable-next-line no-void\n            void runManager?.handleLLMNewToken(chunk.text ?? \"\");\n        }\n        if (options.signal?.aborted) {\n            throw new Error(\"AbortError\");\n        }\n    }\n    addAllHooksToHttpClient() {\n        try {\n            // To prevent duplicate hooks\n            this.removeAllHooksFromHttpClient();\n            // If the user wants to use hooks, but hasn't created an HTTPClient yet\n            const hasHooks = [\n                this.beforeRequestHooks,\n                this.requestErrorHooks,\n                this.responseHooks,\n            ].some((hook) => hook && hook.length > 0);\n            if (hasHooks && !this.httpClient) {\n                this.httpClient = new MistralAIHTTPClient();\n            }\n            if (this.beforeRequestHooks) {\n                for (const hook of this.beforeRequestHooks) {\n                    this.httpClient?.addHook(\"beforeRequest\", hook);\n                }\n            }\n            if (this.requestErrorHooks) {\n                for (const hook of this.requestErrorHooks) {\n                    this.httpClient?.addHook(\"requestError\", hook);\n                }\n            }\n            if (this.responseHooks) {\n                for (const hook of this.responseHooks) {\n                    this.httpClient?.addHook(\"response\", hook);\n                }\n            }\n        }\n        catch {\n            throw new Error(\"Error in adding all hooks\");\n        }\n    }\n    removeAllHooksFromHttpClient() {\n        try {\n            if (this.beforeRequestHooks) {\n                for (const hook of this.beforeRequestHooks) {\n                    this.httpClient?.removeHook(\"beforeRequest\", hook);\n                }\n            }\n            if (this.requestErrorHooks) {\n                for (const hook of this.requestErrorHooks) {\n                    this.httpClient?.removeHook(\"requestError\", hook);\n                }\n            }\n            if (this.responseHooks) {\n                for (const hook of this.responseHooks) {\n                    this.httpClient?.removeHook(\"response\", hook);\n                }\n            }\n        }\n        catch {\n            throw new Error(\"Error in removing hooks\");\n        }\n    }\n    removeHookFromHttpClient(hook) {\n        try {\n            this.httpClient?.removeHook(\"beforeRequest\", hook);\n            this.httpClient?.removeHook(\"requestError\", hook);\n            this.httpClient?.removeHook(\"response\", hook);\n        }\n        catch {\n            throw new Error(\"Error in removing hook\");\n        }\n    }\n    /** @ignore */\n    async imports() {\n        const { Mistral } = await import(\"@mistralai/mistralai\");\n        return { Mistral };\n    }\n}\n"],
  "mappings": "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",
  "names": ["MistralClient", "generations", "MistralAIHTTPClient", "config", "import_http", "MistralAIHTTPClient", "import_http", "choices", "data", "MistralAIHTTPClient"]
}
