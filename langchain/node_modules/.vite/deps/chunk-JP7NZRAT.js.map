{
  "version": 3,
  "sources": ["../../@langchain/core/dist/utils/function_calling.js"],
  "sourcesContent": ["import { zodToJsonSchema } from \"zod-to-json-schema\";\nimport { Runnable } from \"../runnables/base.js\";\nimport { isZodSchema } from \"./types/is_zod_schema.js\";\n/**\n * Formats a `StructuredTool` or `RunnableToolLike` instance into a format\n * that is compatible with OpenAI function calling. It uses the `zodToJsonSchema`\n * function to convert the schema of the `StructuredTool` or `RunnableToolLike`\n * into a JSON schema, which is then used as the parameters for the OpenAI function.\n *\n * @param {StructuredToolInterface | RunnableToolLike} tool The tool to convert to an OpenAI function.\n * @returns {FunctionDefinition} The inputted tool in OpenAI function format.\n */\nexport function convertToOpenAIFunction(tool, fields) {\n    // @TODO 0.3.0 Remove the `number` typing\n    const fieldsCopy = typeof fields === \"number\" ? undefined : fields;\n    return {\n        name: tool.name,\n        description: tool.description,\n        parameters: zodToJsonSchema(tool.schema),\n        // Do not include the `strict` field if it is `undefined`.\n        ...(fieldsCopy?.strict !== undefined ? { strict: fieldsCopy.strict } : {}),\n    };\n}\n/**\n * Formats a `StructuredTool` or `RunnableToolLike` instance into a\n * format that is compatible with OpenAI tool calling. It uses the\n * `zodToJsonSchema` function to convert the schema of the `StructuredTool`\n * or `RunnableToolLike` into a JSON schema, which is then used as the\n * parameters for the OpenAI tool.\n *\n * @param {StructuredToolInterface | Record<string, any> | RunnableToolLike} tool The tool to convert to an OpenAI tool.\n * @returns {ToolDefinition} The inputted tool in OpenAI tool format.\n */\nexport function convertToOpenAITool(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntool, fields) {\n    // @TODO 0.3.0 Remove the `number` typing\n    const fieldsCopy = typeof fields === \"number\" ? undefined : fields;\n    let toolDef;\n    if (isLangChainTool(tool)) {\n        toolDef = {\n            type: \"function\",\n            function: convertToOpenAIFunction(tool),\n        };\n    }\n    else {\n        toolDef = tool;\n    }\n    if (fieldsCopy?.strict !== undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        toolDef.function.strict = fieldsCopy.strict;\n    }\n    return toolDef;\n}\n/**\n * Confirm whether the inputted tool is an instance of `StructuredToolInterface`.\n *\n * @param {StructuredToolInterface | Record<string, any> | undefined} tool The tool to check if it is an instance of `StructuredToolInterface`.\n * @returns {tool is StructuredToolInterface} Whether the inputted tool is an instance of `StructuredToolInterface`.\n */\nexport function isStructuredTool(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntool) {\n    return (tool !== undefined &&\n        Array.isArray(tool.lc_namespace));\n}\n/**\n * Confirm whether the inputted tool is an instance of `RunnableToolLike`.\n *\n * @param {unknown | undefined} tool The tool to check if it is an instance of `RunnableToolLike`.\n * @returns {tool is RunnableToolLike} Whether the inputted tool is an instance of `RunnableToolLike`.\n */\nexport function isRunnableToolLike(tool) {\n    return (tool !== undefined &&\n        Runnable.isRunnable(tool) &&\n        \"lc_name\" in tool.constructor &&\n        typeof tool.constructor.lc_name === \"function\" &&\n        tool.constructor.lc_name() === \"RunnableToolLike\");\n}\n/**\n * Confirm whether or not the tool contains the necessary properties to be considered a `StructuredToolParams`.\n *\n * @param {unknown | undefined} tool The object to check if it is a `StructuredToolParams`.\n * @returns {tool is StructuredToolParams} Whether the inputted object is a `StructuredToolParams`.\n */\nexport function isStructuredToolParams(tool) {\n    return (!!tool &&\n        typeof tool === \"object\" &&\n        \"name\" in tool &&\n        \"schema\" in tool &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        isZodSchema(tool.schema));\n}\n/**\n * Whether or not the tool is one of StructuredTool, RunnableTool or StructuredToolParams.\n * It returns `is StructuredToolParams` since that is the most minimal interface of the three,\n * while still containing the necessary properties to be passed to a LLM for tool calling.\n *\n * @param {unknown | undefined} tool The tool to check if it is a LangChain tool.\n * @returns {tool is StructuredToolParams} Whether the inputted tool is a LangChain tool.\n */\nexport function isLangChainTool(tool) {\n    return (isStructuredToolParams(tool) ||\n        isRunnableToolLike(tool) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        isStructuredTool(tool));\n}\n"],
  "mappings": ";;;;;;;;;AAYO,SAAS,wBAAwB,MAAM,QAAQ;AAElD,QAAM,aAAa,OAAO,WAAW,WAAW,SAAY;AAC5D,SAAO;AAAA,IACH,MAAM,KAAK;AAAA,IACX,aAAa,KAAK;AAAA,IAClB,YAAY,gBAAgB,KAAK,MAAM;AAAA;AAAA,IAEvC,IAAI,yCAAY,YAAW,SAAY,EAAE,QAAQ,WAAW,OAAO,IAAI,CAAC;AAAA,EAC5E;AACJ;AAWO,SAAS,oBAEhB,MAAM,QAAQ;AAEV,QAAM,aAAa,OAAO,WAAW,WAAW,SAAY;AAC5D,MAAI;AACJ,MAAI,gBAAgB,IAAI,GAAG;AACvB,cAAU;AAAA,MACN,MAAM;AAAA,MACN,UAAU,wBAAwB,IAAI;AAAA,IAC1C;AAAA,EACJ,OACK;AACD,cAAU;AAAA,EACd;AACA,OAAI,yCAAY,YAAW,QAAW;AAElC,YAAQ,SAAS,SAAS,WAAW;AAAA,EACzC;AACA,SAAO;AACX;AAOO,SAAS,iBAEhB,MAAM;AACF,SAAQ,SAAS,UACb,MAAM,QAAQ,KAAK,YAAY;AACvC;AAOO,SAAS,mBAAmB,MAAM;AACrC,SAAQ,SAAS,UACb,SAAS,WAAW,IAAI,KACxB,aAAa,KAAK,eAClB,OAAO,KAAK,YAAY,YAAY,cACpC,KAAK,YAAY,QAAQ,MAAM;AACvC;AAOO,SAAS,uBAAuB,MAAM;AACzC,SAAQ,CAAC,CAAC,QACN,OAAO,SAAS,YAChB,UAAU,QACV,YAAY;AAAA,EAEZ,YAAY,KAAK,MAAM;AAC/B;AASO,SAAS,gBAAgB,MAAM;AAClC,SAAQ,uBAAuB,IAAI,KAC/B,mBAAmB,IAAI;AAAA,EAEvB,iBAAiB,IAAI;AAC7B;",
  "names": []
}
