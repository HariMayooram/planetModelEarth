{
  "version": 3,
  "sources": ["../../@langchain/core/dist/output_parsers/openai_tools/json_output_tools_parsers.js"],
  "sourcesContent": ["import { OutputParserException } from \"../base.js\";\nimport { parsePartialJson } from \"../json.js\";\nimport { BaseCumulativeTransformOutputParser, } from \"../transform.js\";\nimport { isAIMessage } from \"../../messages/ai.js\";\nexport function parseToolCall(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrawToolCall, options) {\n    if (rawToolCall.function === undefined) {\n        return undefined;\n    }\n    let functionArgs;\n    if (options?.partial) {\n        try {\n            functionArgs = parsePartialJson(rawToolCall.function.arguments ?? \"{}\");\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    else {\n        try {\n            functionArgs = JSON.parse(rawToolCall.function.arguments);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        catch (e) {\n            throw new OutputParserException([\n                `Function \"${rawToolCall.function.name}\" arguments:`,\n                ``,\n                rawToolCall.function.arguments,\n                ``,\n                `are not valid JSON.`,\n                `Error: ${e.message}`,\n            ].join(\"\\n\"));\n        }\n    }\n    const parsedToolCall = {\n        name: rawToolCall.function.name,\n        args: functionArgs,\n        type: \"tool_call\",\n    };\n    if (options?.returnId) {\n        parsedToolCall.id = rawToolCall.id;\n    }\n    return parsedToolCall;\n}\nexport function convertLangChainToolCallToOpenAI(toolCall) {\n    if (toolCall.id === undefined) {\n        throw new Error(`All OpenAI tool calls must have an \"id\" field.`);\n    }\n    return {\n        id: toolCall.id,\n        type: \"function\",\n        function: {\n            name: toolCall.name,\n            arguments: JSON.stringify(toolCall.args),\n        },\n    };\n}\nexport function makeInvalidToolCall(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrawToolCall, errorMsg) {\n    return {\n        name: rawToolCall.function?.name,\n        args: rawToolCall.function?.arguments,\n        id: rawToolCall.id,\n        error: errorMsg,\n        type: \"invalid_tool_call\",\n    };\n}\n/**\n * Class for parsing the output of a tool-calling LLM into a JSON object.\n */\nexport class JsonOutputToolsParser extends BaseCumulativeTransformOutputParser {\n    static lc_name() {\n        return \"JsonOutputToolsParser\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"returnId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"output_parsers\", \"openai_tools\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.returnId = fields?.returnId ?? this.returnId;\n    }\n    _diff() {\n        throw new Error(\"Not supported.\");\n    }\n    async parse() {\n        throw new Error(\"Not implemented.\");\n    }\n    async parseResult(generations) {\n        const result = await this.parsePartialResult(generations, false);\n        return result;\n    }\n    /**\n     * Parses the output and returns a JSON object. If `argsOnly` is true,\n     * only the arguments of the function call are returned.\n     * @param generations The output of the LLM to parse.\n     * @returns A JSON object representation of the function call or its arguments.\n     */\n    async parsePartialResult(generations, partial = true\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ) {\n        const message = generations[0].message;\n        let toolCalls;\n        if (isAIMessage(message) && message.tool_calls?.length) {\n            toolCalls = message.tool_calls.map((toolCall) => {\n                const { id, ...rest } = toolCall;\n                if (!this.returnId) {\n                    return rest;\n                }\n                return {\n                    id,\n                    ...rest,\n                };\n            });\n        }\n        else if (message.additional_kwargs.tool_calls !== undefined) {\n            const rawToolCalls = JSON.parse(JSON.stringify(message.additional_kwargs.tool_calls));\n            toolCalls = rawToolCalls.map((rawToolCall) => {\n                return parseToolCall(rawToolCall, { returnId: this.returnId, partial });\n            });\n        }\n        if (!toolCalls) {\n            return [];\n        }\n        const parsedToolCalls = [];\n        for (const toolCall of toolCalls) {\n            if (toolCall !== undefined) {\n                const backwardsCompatibleToolCall = {\n                    type: toolCall.name,\n                    args: toolCall.args,\n                    id: toolCall.id,\n                };\n                parsedToolCalls.push(backwardsCompatibleToolCall);\n            }\n        }\n        return parsedToolCalls;\n    }\n}\n/**\n * Class for parsing the output of a tool-calling LLM into a JSON object if you are\n * expecting only a single tool to be called.\n */\nexport class JsonOutputKeyToolsParser extends JsonOutputToolsParser {\n    static lc_name() {\n        return \"JsonOutputKeyToolsParser\";\n    }\n    constructor(params) {\n        super(params);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"output_parsers\", \"openai_tools\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"returnId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        /** The type of tool calls to return. */\n        Object.defineProperty(this, \"keyName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Whether to return only the first tool call. */\n        Object.defineProperty(this, \"returnSingle\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"zodSchema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.keyName = params.keyName;\n        this.returnSingle = params.returnSingle ?? this.returnSingle;\n        this.zodSchema = params.zodSchema;\n    }\n    async _validateResult(result) {\n        if (this.zodSchema === undefined) {\n            return result;\n        }\n        const zodParsedResult = await this.zodSchema.safeParseAsync(result);\n        if (zodParsedResult.success) {\n            return zodParsedResult.data;\n        }\n        else {\n            throw new OutputParserException(`Failed to parse. Text: \"${JSON.stringify(result, null, 2)}\". Error: ${JSON.stringify(zodParsedResult.error.errors)}`, JSON.stringify(result, null, 2));\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async parsePartialResult(generations) {\n        const results = await super.parsePartialResult(generations);\n        const matchingResults = results.filter((result) => result.type === this.keyName);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let returnedValues = matchingResults;\n        if (!matchingResults.length) {\n            return undefined;\n        }\n        if (!this.returnId) {\n            returnedValues = matchingResults.map((result) => result.args);\n        }\n        if (this.returnSingle) {\n            return returnedValues[0];\n        }\n        return returnedValues;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async parseResult(generations) {\n        const results = await super.parsePartialResult(generations, false);\n        const matchingResults = results.filter((result) => result.type === this.keyName);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let returnedValues = matchingResults;\n        if (!matchingResults.length) {\n            return undefined;\n        }\n        if (!this.returnId) {\n            returnedValues = matchingResults.map((result) => result.args);\n        }\n        if (this.returnSingle) {\n            return this._validateResult(returnedValues[0]);\n        }\n        const toolCallResults = await Promise.all(returnedValues.map((value) => this._validateResult(value)));\n        return toolCallResults;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
