{
  "version": 3,
  "sources": ["../../@langchain/core/dist/utils/chunk_array.js", "../../@langchain/core/dist/embeddings.js"],
  "sourcesContent": ["export const chunkArray = (arr, chunkSize) => arr.reduce((chunks, elem, index) => {\n    const chunkIndex = Math.floor(index / chunkSize);\n    const chunk = chunks[chunkIndex] || [];\n    // eslint-disable-next-line no-param-reassign\n    chunks[chunkIndex] = chunk.concat([elem]);\n    return chunks;\n}, []);\n", "import { AsyncCaller } from \"./utils/async_caller.js\";\n/**\n * An abstract class that provides methods for embedding documents and\n * queries using LangChain.\n */\nexport class Embeddings {\n    constructor(params) {\n        /**\n         * The async caller should be used by subclasses to make any async calls,\n         * which will thus benefit from the concurrency and retry logic.\n         */\n        Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.caller = new AsyncCaller(params ?? {});\n    }\n}\n"],
  "mappings": ";;;;;AAAO,IAAM,aAAa,CAAC,KAAK,cAAc,IAAI,OAAO,CAAC,QAAQ,MAAM,UAAU;AAC9E,QAAM,aAAa,KAAK,MAAM,QAAQ,SAAS;AAC/C,QAAM,QAAQ,OAAO,UAAU,KAAK,CAAC;AAErC,SAAO,UAAU,IAAI,MAAM,OAAO,CAAC,IAAI,CAAC;AACxC,SAAO;AACX,GAAG,CAAC,CAAC;;;ACDE,IAAM,aAAN,MAAiB;AAAA,EACpB,YAAY,QAAQ;AAKhB,WAAO,eAAe,MAAM,UAAU;AAAA,MAClC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACX,CAAC;AACD,SAAK,SAAS,IAAI,YAAY,UAAU,CAAC,CAAC;AAAA,EAC9C;AACJ;",
  "names": []
}
